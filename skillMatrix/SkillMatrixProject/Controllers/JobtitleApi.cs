/*
 * Skill Matrix Project
 *
 * This is a sample server Skill Matrix server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using SkillMatrixProject.Repositories;
using SkillMatrixProject.Models;
using AutoMapper;
using SkillMatrixProject.DTOs;

namespace skillMatrix.WebAPI.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class JobtitleApiController : ControllerBase
    { 

        private IRepository<Jobtitle> jobtitleRepo { get; set; }
        private IMapper mapper;
        public JobtitleApiController(IRepository<Jobtitle> jobtitleRepo, IMapper mapper)
        {
                this.jobtitleRepo = jobtitleRepo;
                this.mapper = mapper;   
        }
        /// <summary>
        /// Add a new Jobtitle to the application
        /// </summary>
        /// <param name="body">Jobtitle object that needs to be added to the application</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/v2/jobtitle")]
   
        [SwaggerOperation("AddJobtitle")]
        public virtual IActionResult AddJobtitle([FromBody]JobtitleDto body)
        {
            var entity = mapper.Map<Jobtitle>(body);
            Jobtitle jobtitle = jobtitleRepo.Add(entity);
            jobtitleRepo.SaveChanges();
            return Ok(mapper.Map<JobtitleDto>(jobtitle));    
        }

        /// <summary>
        /// Deletes an Jobtitle
        /// </summary>
        /// <param name="jobtitleId">ID of jobtitle to return</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Jobtitle not found</response>
        [HttpDelete]
        [Route("/v2/jobtitle/{jobtitleId}")]
       
        [SwaggerOperation("DeleteJobtitle")]
        public virtual IActionResult DeleteJobtitle([FromRoute][Required]string jobtitleId)
        { 
            jobtitleRepo.Delete(jobtitleId);
            jobtitleRepo.SaveChanges();
            return Ok();
        }

        /// <summary>
        /// Fetch all the Jobtitles
        /// </summary>
        /// <remarks>return all Jobtitles</remarks>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/v2/jobtitle")]
       
        [SwaggerOperation("GetAllJobtitles")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Jobtitle>), description: "successful operation")]
        public virtual IActionResult GetAllJobtitles()
        { 
            var allJobtitles = jobtitleRepo.GetAll();
            var result = new List<JobtitleDto>();
            foreach (var item in allJobtitles)
            {
                result.Add(mapper.Map<JobtitleDto>(item));
            }
            return Ok(result);
        }

        /// <summary>
        /// Find Jobtitle by ID
        /// </summary>
        /// <remarks>Returns a single Jobtitle</remarks>
        /// <param name="jobtitleId">ID of jobtitle to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Jobtitle not found</response>
        [HttpGet]
        [Route("/v2/jobtitle/{jobtitleId}")]
        
        [SwaggerOperation("GetJobtitleById")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Jobtitle>), description: "successful operation")]
        public virtual IActionResult GetJobtitleById([FromRoute][Required]string jobtitleId)
        { 
            var jobtitle = jobtitleRepo.GetById(jobtitleId);
            if (jobtitle == null)
            {
                return NotFound();
            }
            return Ok(mapper.Map<JobtitleDto>(jobtitle));
        }

        /// <summary>
        /// Update an existing jobtitle
        /// </summary>
        /// <param name="body">jobtitle object that needs to be updated</param>
        /// <param name="jobtitleId">ID of jobtitle to return</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Jobtitle not found</response>
        /// <response code="405">Validation exception</response>
        [HttpPut]
        [Route("/v2/jobtitle/{jobtitleId}")]
        
        [SwaggerOperation("UpdateJobtitle")]
        public virtual IActionResult UpdateJobtitle([FromBody]Jobtitle body)
        { 
            var updatedJobtitle = jobtitleRepo.Update(body);
            return Ok(mapper.Map<JobtitleDto>(updatedJobtitle));
        }
    }
}
